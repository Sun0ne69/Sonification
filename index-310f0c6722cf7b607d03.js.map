{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/automation-events/build/es5/bundle.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/abort-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/globals.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/invalid-state-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/is-constructible.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/split-import-statements.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/add-audio-worklet-module.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-value-for-key.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/is-owned-by-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-graph.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/index-size-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/constants.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-event-listeners-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-event-listener.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/connect-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/render-automation.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/is-valid-latency-hint.js","webpack:///./node_modules/standardized-audio-context/build/es2018/event-target.js","webpack:///./node_modules/standardized-audio-context/build/es2018/guards/audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/guards/audio-node-output-connection.js","webpack:///./node_modules/standardized-audio-context/build/es2018/guards/audio-worklet-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/delete-event-listeners-of-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/insert-element-in-set.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/is-active-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/is-passive-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/pick-element-from-set.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/guards/native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/read-only-map.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/copy-from-channel.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/copy-to-channel.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/create-nested-arrays.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-worklet-processor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/delay-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/disconnect-multiple-outputs.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/gain-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/invalid-access-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/filter-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-promise-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/minimal-offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-option.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-audio-param-value.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/compute-buffer-size.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor-promise.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/clone-audio-worklet-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/intercept-connections.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/not-supported-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/panner-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/periodic-wave-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/unknown-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-transferables-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/module.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/cache-test-result.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/window.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-offline-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/get-backup-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-analyser-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-node-disconnect-method.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/detect-cycles.js","webpack:///./node_modules/standardized-audio-context/build/es2018/guards/delay-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/none-audio-destination-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/convert-number-to-unsigned-long.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-constructor-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-param-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-param-renderer.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-destination-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-biquad-filter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wrap-channel-merger-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-channel-merger-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-channel-splitter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-channel-splitter-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-gain-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-delay-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-dynamics-compressor-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-script-processor-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/render-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-offline-audio-context-current-time-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-listener-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/minimal-base-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-oscillator-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-periodic-wave-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-secure-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/expose-current-frame-and-current-time.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/evaluate-source.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/fetch-source.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-native-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/decode-audio-data.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/detach-array-buffer.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/data-clone-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/encoding-error.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/media-element-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-media-element-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/media-stream-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/media-stream-track-audio-source-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/connect-multiple-outputs.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-faker-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-factory.js","webpack:///./node_modules/standardized-audio-context/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/minimal-audio-context-constructor.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/create-native-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/start-rendering.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-node.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-param.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-any-offline-audio-context.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/is-supported-promise.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-context-close-method-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-context-decode-audio-data-method-type-error-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-context-options-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-audio-worklet-processor-no-outputs-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-channel-splitter-node-channel-count-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-constant-source-node-accurate-scheduling-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-convolver-node-buffer-reassignability-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-is-secure-context-support.js","webpack:///./node_modules/standardized-audio-context/build/es2018/factories/test-stereo-panner-node-default-value-support.js"],"names":["module","exports","arr","Array","isArray","i","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","_slicedToArray","_classCallCheck","_createClass","hasOwnProperty","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","this","_automationEvents","_currenTime","_defaultValue","key","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","Error","startValue","truncatedAutomationEvent","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","defineProperty","factory","DOMException","code","name","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_BUFFER_STORE","AUDIO_NODE_STORE","WeakMap","AUDIO_GRAPHS","AUDIO_PARAM_STORE","AUDIO_PARAM_AUDIO_NODE_STORE","AUXILIARY_GAIN_NODE_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","DETACHED_ARRAY_BUFFERS","EVENT_LISTENERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","PERIODIC_WAVE_STORE","TEST_RESULTS","getNativeContext","context","nativeContext","get","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","importStatementWithResolvedUrl","URL","toString","join","verifyParameterDescriptors","parameterDescriptors","verifyProcessorCtor","processorCtor","constructible","Proxy","_a","isConstructible","prototype","process","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","map","getNativeAudioNode","audioNode","isOwnedByContext","nativeAudioNode","getAudioGraph","audioGraph","nodes","getAudioNodeRenderer","audioNodeConnections","renderer","renderInputsOfAudioNode","nativeOfflineAudioContext","Promise","all","activeInputs","connections","input","from","output","render","then","node","connect","reduce","allRenderingPromises","renderingPromises","nativeAudioBuffer","copyToChannel","copyFromChannel","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","call","numberOfChannels","MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","getEventListenersOfAudioNode","setInternalState","internalState","has","add","delete","forEach","eventListener","wrapEventListener","event","descriptor","defineProperties","currentTarget","buffer","loop","loopEnd","loopStart","playbackRate","getNativeAudioParam","audioParam","getAudioParamConnections","params","renderInputsOfAudioParam","nativeAudioParam","audioParamConnections","connectAudioParam","renderAutomation","getAudioParamRenderer","replay","isValidLatencyHint","latencyHint","_nativeEventTarget","_listeners","listener","options","wrappedEventListener","set","addEventListener","dispatchEvent","removeEventListener","isAudioNode","audioNodeOrAudioParam","isAudioNodeOutputConnection","outputConnection","isAudioWorkletNode","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","inputs","deleteEventListenerOfAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","disconnect","insertElementInSet","element","predicate","ignoreDuplicates","lmnt","isActiveAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","filter","matchingElement","setInternalStateToPassiveWhenNecessary","every","size","testAudioNodeDisconnectMethodSupport","nativeAudioContext","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","createBufferSource","destination","onaudioprocess","chnnlDt","inputBuffer","some","sample","stop","start","nativeAudioNodeOrAudioParam","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","outputs","eventListeners","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","ReadOnlyMap","parameters","_map","Map","entries","callback","thisArg","keys","numberOfInputs","numberOfOutputs","outputChannelCount","parameterData","processorOptions","createChannelCount","parent","channelNumber","bufferOffset","byteLength","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","processBuffer","async","proxy","renderedBuffer","processorConstructor","numberOfInputChannels","numberOfOutputChannels","sum","processedBuffer","sampleRate","audioWorkletProcessor","nodeToProcessorMap","nativeAudioWorkletNode","getAudioWorkletProcessor","prmtrs","k","potentiallyEmptyInputs","activeSourceFlag","outputChannelSplitterNodeOutput","error","ErrorEvent","Q","detune","frequency","gain","offset","disableNormalization","delayTime","maxDelayTime","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","outputAudioNode","attack","knee","ratio","release","threshold","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","uint32Array","Uint32Array","promise","decodeAudioData","catch","assignNativeAudioNodeOption","option","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","nativeAnalyserNode","getFloatTimeDomainData","assignNativeAudioNodeAudioParamValue","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","when","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","computeBufferSize","baseLatency","max","min","round","log2","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","reject","port1","port2","MessageChannel","onmessage","data","close","onmessageerror","postMessage","cloneAudioWorkletNodeOptions","interceptConnections","original","interceptor","apply","arguments","divide","a","b","denominator","evaluatePolynomial","coefficient","z","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","pan","curve","oversample","testTransferablesSupport","arrayBuffer","ArrayBuffer","ongoingTests","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","window","OfflineAudioContext","webkitOfflineAudioContext","createNativeOfflineAudioContextConstructor","nativeOfflineAudioContextConstructor","anything","AudioContext","webkitAudioContext","createNativeAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","state","backupNativeContext","bckpNtveCntxt","createGetBackupNativeContext","getBackupNativeContext","factoryFunction","cacheTestResult","createNativeAudioNode","ntvCntxt","createAnalyser","byteTimeDomainData","Uint8Array","getByteTimeDomainData","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createNativeAnalyserNode","renderedNativeAnalyserNodes","renderedNativeAnalyserNode","createAnalyserNode","AudioNode","createIsNativeAudioNode","AudioParam","createIsNativeAudioParam","createInvalidAccessError","createNotSupportedError","detectCycles","isNativeAudioNode","isNativeAudioParam","audioNodeRenderer","super","_context","_nativeAudioNode","bind","returnValue","connectionsToDestination","connection","destinationOrOutput","clear","filteredConnections","wrapAudioNodeDisconnectMethod","audioNoderRender","addAudioNode","isOffline","auxiliaryGainNodes","nativeGainNode","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","numberOfDeletedConnections","deleteConnectionToDestination","createAudioNodeConstructor","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","audioNodeOfDestination","audioNodeConstructor","analyserNodeConstructor","createAnalyserNodeRenderer","noneAudioDestinationNodeConstructor","mergedOptions","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getFloatFrequencyData","createAnalyserNodeConstructor","AudioBuffer","createNativeAudioBufferConstructor","convertNumberToUnsignedLong","unit32Array","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","subarray","createWrapAudioBufferCopyChannelMethodsSubarray","audioBufferConstructor","audioBufferStore","nativeAudioBufferConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","wrapAudioBufferCopyChannelMethodsSubarray","hasInstance","instance","getPrototypeOf","createAudioBufferConstructor","nativeAudioBufferSourceNode","createOscillator","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","disconnectGainNode","isStopped","setValueAtTime","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","Number","POSITIVE_INFINITY","stopTime","actualStartTime","currentTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","createNativeAudioBufferSourceNodeFactory","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","offlineAudioContext","audioBufferSourceNode","oncomplete","startRendering","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","clampedOffset","createNativeAudioBufferSourceNode","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioParamRenderer","automationEventList","exponentialRampToValueAtTime","linearRampToValueAtTime","setTargetAtTime","setValueCurveAtTime","isAudioParamOfOfflineAudioContext","maxValue","minValue","audioParamRenderer","cancelAndHoldAtTime","flush","previousLastEvent","pop","currentLastEvent","cancelScheduledValues","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","addAudioParam","audioBufferSourceNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","wrappedListener","onended","nativeOnEnded","setInternalStateToInactive","setTimeout","createAudioBufferSourceNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","audioDestinationNodeRenderer","audioWorkletGlobalScope","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","createAudioDestinationNodeConstructor","nativeAudioDestinationNodePromise","createAudioDestinationNode","isNodeOfNativeOfflineAudioContext","nativeBiquadFilterNode","createBiquadFilter","createNativeBiquadFilterNodeFactory","createNativeBiquadFilterNode","biquadFilterNodeConstructor","createBiquadFilterNodeRenderer","_Q","_detune","_frequency","_gain","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeConstructor","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","channelMergerNode","createWrapChannelMergerNode","wrapChannelMergerNode","nativeChannelMergerNode","createChannelMerger","createNativeChannelMergerNodeFactory","createNativeChannelMergerNode","channelMergerNodeConstructor","createChannelMergerNodeRenderer","createChannelMergerNodeConstructor","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","nativeChannelSplitterNode","createChannelSplitter","channelSplitterNode","wrapChannelSplitterNode","createNativeChannelSplitterNodeFactory","createNativeChannelSplitterNode","channelSplitterNodeConstructor","createChannelSplitterNodeRenderer","createChannelSplitterNodeConstructor","createNativeGainNodeFactory","createNativeGainNode","audioNodeOptions","gainNode","args","createNativeConstantSourceNodeFakerFactory","createNativeConstantSourceNodeFaker","createConstantSource","nativeConstantSourceNode","createNativeConstantSourceNodeFactory","createNativeConstantSourceNode","constantSourceNodeConstructor","createConstantSourceNodeRendererFactory","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","createConstantSourceNodeConstructor","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","nativeConvolverNode","createConvolver","normalize","createNativeConvolverNodeFactory","createNativeConvolverNode","convolverNodeConstructor","createConvolverNodeRenderer","_nativeConvolverNode","createConvolverNodeConstructor","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","nativeDelayNode","createDelay","createNativeDelayNodeFactory","createNativeDelayNode","delayNodeConstructor","createDelayNodeRenderer","_delayTime","createDelayNodeConstructor","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","nativeDynamicsCompressorNode","createDynamicsCompressor","createNativeDynamicsCompressorNodeFactory","createNativeDynamicsCompressorNode","dynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeConstructor","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createGainNodeRenderer","createGainNodeConstructor","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","bufferSize","createNativeScriptProcessorNodeFactory","createNativeScriptProcessorNode","scriptProcessorNode","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","omega","PI","cos","sin","response","sqrt","atan2","createNativeIIRFilterNodeFakerFactory","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","createRenderNativeOfflineAudioContext","createTestOfflineAudioContextCurrentTimeSupport","renderNativeOfflineAudioContext","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","partialOfflineAudioContext","filteredBuffer","filterFullBuffer","createIIRFilterNodeRendererFactory","createNativeIIRFilterNodeFaker","createNativeIIRFilterNodeFactory","iIRFilterNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","nativeListener","forwardX","forwardY","forwardZ","upX","upY","upZ","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","orientation","setOrientation","positon","setPosition","createFakeAudioParams","createAudioListenerFactory","audioDestinationNodeConstructor","createAudioListener","_nativeContext","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","nativeOscillatorNode","periodicWave","setPeriodicWave","createNativeOscillatorNodeFactory","createNativeOscillatorNode","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","oscillatorNodeConstructor","createOscillatorNodeRenderer","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeConstructor","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","centerIndex","createNativeWaveShaperNodeFakerFactory","createNativeWaveShaperNodeFaker","nativeWaveShaperNode","createNativeWaveShaperNodeFactory","createNativeWaveShaperNode","pannerNode","createPanner","SINGLE_CHANNEL_OPTIONS","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePannerNodeFakerFactory","createNativePannerNodeFaker","nativePannerNode","createNativePannerNodeFactory","createNativePannerNode","pannerNodeConstructor","createPannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeConstructor","renderedNativePannerNodes","renderedNativePannerNode","nativePannerNodeIsOwnedByContext","createPannerNode","imag","real","wrappedImag","wrappedReal","createPeriodicWave","createNativePeriodicWaveFactory","periodicWaveConstructor","createNativePeriodicWave","periodicWaveStore","PeriodicWave","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","CURVE_SIZE","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","outputNodes","outputNode","createNativeStereoPannerNodeFakerFactory","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFactory","createNativeStereoPannerNode","stereoPannerNodeConstructor","createStereoPannerNodeRenderer","_pan","createStereoPannerNodeConstructor","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","waveShaperNodeConstructor","createWaveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeConstructor","isSecureContext","createIsSecureContext","fn","currentFrame","configurable","createExposeCurrentFrameAndCurrentTime","addAudioWorkletModule","createAbortError","exposeCurrentFrameAndCurrentTime","fetchSource","ongoingRequests","resolvedRequests","moduleURL","credentials","absoluteUrl","location","href","audioWorklet","blob","Blob","createObjectURL","addModule","revokeObjectURL","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","head","document","SyntaxError","script","createElement","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","message","src","lineno","colno","onload","appendChild","evaluateSource","evaluateAudioWorkletGlobalScope","_AWGS","trim","nodeNameToProcessorConstructorMap","rslvdRqstsFCntxt","ngngRqstsFCntxt","createAddAudioWorkletModule","fetch","ok","text","isNativeAudioContext","createIsNativeAudioContext","createIsNativeContext","createDataCloneError","createEncodingError","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferCopyChannelMethodsSubarraySupport","testPromiseSupport","anyContext","audioData","complete","detachArrayBuffer","fail","createDecodeAudioData","gainNodeConstructor","minimalBaseAudioContextConstructor","_audioWorklet","constraints","successCallback","errorCallback","createBaseAudioContextConstructor","createNativeMediaElementAudioSourceNode","nativeMediaElementAudioSourceNode","_mediaElement","mediaElement","_nativeMediaElementAudioSourceNode","createMediaElementAudioSourceNodeConstructor","ntvDCntxt","createMediaElementSource","createNativeMediaElementAudioSourceNodeFactory","createNativeMediaStreamAudioSourceNode","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","mediaStream","createMediaStreamAudioSourceNodeConstructor","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamAudioSourceNodeFactory","createNativeMediaStreamTrackAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","mediaStreamTrack","createMediaStreamTrackSource","kind","createNativeMediaStreamTrackAudioSourceNodeFactory","audioContextConstructor","baseAudioContextConstructor","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","_baseLatency","_nativeAudioContext","_state","revokeState","resolvePromise","resume","suspend","createAudioContextConstructor","createConnectMultipleOutputs","createDisconnectMultipleOutputs","connectMultipleOutputs","disconnectMultipleOutputs","numberOfParameters","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","outputChannelMergerNode","onprocessorerror","nativeAudioWorkletNodeFaker","_","patchedEventListeners","unpatchedEventListener","handleEvent","patchedEventListener","port","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","isActive","createNativeAudioWorkletNodeFakerFactory","createNativeAudioWorkletNodeFaker","nativeAudioWorkletNodeConstructor","hasNoOutput","testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","AudioWorkletNode","createNativeAudioWorkletNodeConstructor","renderedNativeAudioWorkletNodeOrOutputNodes","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","nm","createAudioWorkletNodeRendererFactory","audioWorkletNodeConstructor","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","sanitizedOptions","_nativeAudioWorkletNode","_numberOfOutputs","_onprocessorerror","_parameters","nativeOnProcessorError","createAudioWorkletNodeConstructor","minimalAudioContextConstructor","createMinimalAudioContextConstructor","createCreateNativeOfflineAudioContext","createStartRendering","minimalOfflineAudioContextConstructor","createNativeOfflineAudioContext","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMinimalOfflineAudioContextConstructor","offlineAudioContextConstructor","c","createOfflineAudioContextConstructor","isAnyAudioContext","contextStore","createIsAnyAudioContext","isAnyAudioNode","audioNodeStore","isAnyAudioParam","audioParamStore","isAnyOfflineAudioContext","createIsAnyOfflineAudioContext","isSupported","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelSplitterNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testIsSecureContextSupport","testStereoPannerNodeDefaultValueSupport","results","createIsSupportedPromise","audioContext","isAudioContextClosable","createTestAudioContextCloseMethodSupport","isPending","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","createTestAudioContextOptionsSupport","isCallingProcess","audioWorkletNode","createTestAudioWorkletProcessorNoOutputsSupport","createTestChannelSplitterNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","createTestConvolverNodeBufferReassignabilitySupport","createTestIsSecureContextSupport","stereoPanner","createTestStereoPannerNodeDefaultValueSupport"],"mappings":"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","file":"index-310f0c6722cf7b607d03.js","sourcesContent":["function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) :\n    (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n}(this, (function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';\n\n    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n\n    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n      return {\n        startTime: startTime,\n        type: 'setValue',\n        value: value\n      };\n    };\n\n    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n      return {\n        duration: duration,\n        startTime: startTime,\n        type: 'setValueCurve',\n        values: values\n      };\n    };\n\n    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n      var startTime = _ref.startTime,\n          target = _ref.target,\n          timeConstant = _ref.timeConstant;\n      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n    };\n\n    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'exponentialRampToValue';\n    };\n\n    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'linearRampToValue';\n    };\n\n    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n    };\n\n    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValue';\n    };\n\n    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValueCurve';\n    };\n\n    var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n      var automationEvent = automationEvents[index];\n      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n    };\n\n    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n    };\n\n    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelAndHold';\n    };\n\n    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelScheduledValues';\n    };\n\n    var getEventTime = function getEventTime(automationEvent) {\n      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n      }\n\n      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n      }\n\n      return automationEvent.startTime;\n    };\n\n    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n\n      if (valueAtStartTime === value) {\n        return value;\n      }\n\n      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n      }\n\n      return 0;\n    };\n\n    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n    };\n\n    var interpolateValue = function interpolateValue(values, theoreticIndex) {\n      var lowerIndex = Math.floor(theoreticIndex);\n      var upperIndex = Math.ceil(theoreticIndex);\n\n      if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n      }\n\n      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n    };\n\n    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n      var duration = _ref.duration,\n          startTime = _ref.startTime,\n          values = _ref.values;\n      var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n      return interpolateValue(values, theoreticIndex);\n    };\n\n    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setTarget';\n    };\n\n    var AutomationEventList =\n    /*#__PURE__*/\n    function () {\n      function AutomationEventList(defaultValue) {\n        _classCallCheck(this, AutomationEventList);\n\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n      }\n\n      _createClass(AutomationEventList, [{\n        key: Symbol.iterator,\n        value: function value() {\n          return this._automationEvents[Symbol.iterator]();\n        }\n      }, {\n        key: \"add\",\n        value: function add(automationEvent) {\n          var eventTime = getEventTime(automationEvent);\n\n          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n\n            var removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n              this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                  throw new Error('The internal list is malformed.');\n                }\n\n                var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n                var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                this._automationEvents.push(truncatedAutomationEvent);\n              }\n\n              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n              }\n\n              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n              }\n            }\n          } else {\n            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) > eventTime;\n            });\n\n            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n              return false;\n            }\n\n            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n            if (_index === -1) {\n              this._automationEvents.push(persistentAutomationEvent);\n            } else {\n              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n                return false;\n              }\n\n              this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n            }\n          }\n\n          return true;\n        }\n      }, {\n        key: \"flush\",\n        value: function flush(time) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > time;\n          });\n\n          if (index > 1) {\n            var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n            var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n              remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n          }\n        }\n      }, {\n        key: \"getValue\",\n        value: function getValue(time) {\n          if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n          }\n\n          var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n          var index = this._automationEvents.findIndex(function (automationEvent) {\n            return getEventTime(automationEvent) > time;\n          });\n\n          var nextAutomationEvent = this._automationEvents[index];\n          var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n              return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n          }\n\n          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n                startTime = _getEndTimeAndValueOf2[0],\n                value = _getEndTimeAndValueOf2[1];\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n          }\n\n          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n                _startTime = _getEndTimeAndValueOf4[0],\n                _value = _getEndTimeAndValueOf4[1];\n\n            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n          }\n\n          return this._defaultValue;\n        }\n      }]);\n\n      return AutomationEventList;\n    }();\n\n    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelAndHold'\n      };\n    };\n\n    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelScheduledValues'\n      };\n    };\n\n    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n      return {\n        startTime: startTime,\n        target: target,\n        timeConstant: timeConstant,\n        type: 'setTarget'\n      };\n    };\n\n    exports.AutomationEventList = AutomationEventList;\n    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","export const createAbortError = () => {\n    try {\n        return new DOMException('', 'AbortError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 20;\n        err.name = 'AbortError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/abort-error.js.map","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_BUFFER_STORE = new WeakSet();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_GRAPHS = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const AUDIO_PARAM_AUDIO_NODE_STORE = new WeakMap();\nexport const AUXILIARY_GAIN_NODE_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const DETACHED_ARRAY_BUFFERS = new WeakSet();\nexport const EVENT_LISTENERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\nexport const PERIODIC_WAVE_STORE = new WeakSet();\nexport const TEST_RESULTS = new WeakMap();\n//# sourceMappingURL=/build/es2018/globals.js.map","export const createInvalidStateError = () => {\n    try {\n        return new DOMException('', 'InvalidStateError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-state-error.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { CONTEXT_STORE } from '../globals';\nexport const getNativeContext = (context) => {\n    const nativeContext = CONTEXT_STORE.get(context);\n    if (nativeContext === undefined) {\n        throw createInvalidStateError();\n    }\n    return nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-context.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2018/helpers/split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { evaluateSource } from '../helpers/evaluate-source';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n    if (typeof processorCtor.prototype.process !== 'function') {\n        throw new TypeError('The given value for processorCtor should have a callable process() function.');\n    }\n};\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, ongoingRequests, resolvedRequests) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.name === 'SyntaxError') {\n                throw createAbortError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-worklet-module.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AnalyserNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-value-for-key.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-node.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-owned-by-context.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioGraph(context) {\n    return getValueForKey(AUDIO_GRAPHS, context);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-graph.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    const audioGraph = getAudioGraph(audioNode.context);\n    return getValueForKey(audioGraph.nodes, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-connections.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nexport const getAudioNodeRenderer = (audioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    if (audioNodeConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n    return audioNodeConnections.renderer;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-renderer.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioNodeRenderer } from './get-audio-node-renderer';\nexport const renderInputsOfAudioNode = (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    return Promise\n        .all(audioNodeConnections.activeInputs\n        .map((connections, input) => Array\n        .from(connections)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioNode, output, input));\n    }))\n        .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-node.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","export const testAudioBufferCopyChannelMethodsSubarraySupport = (nativeAudioBuffer) => {\n    const source = new Float32Array(2);\n    try {\n        /*\n         * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those\n         * methods is enough to know if the other one it supported as well.\n         */\n        nativeAudioBuffer.copyFromChannel(source, 0, nativeAudioBuffer.length - 1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js.map","export const createIndexSizeError = () => {\n    try {\n        return new DOMException('', 'IndexSizeError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 1;\n        err.name = 'IndexSizeError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/index-size-error.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from '../helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype)\n                || (audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-constructor.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=/build/es2018/constants.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalState = (audioNode, internalState) => {\n    if (internalState === 'active') {\n        if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is already stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    }\n    else {\n        if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is not stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    }\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(internalState));\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state.js.map","export const wrapEventListener = (target, eventListener) => {\n    if (typeof eventListener === 'function') {\n        return (event) => {\n            const descriptor = { value: target };\n            Object.defineProperties(event, {\n                currentTarget: descriptor,\n                target: descriptor\n            });\n            return eventListener.call(target, event);\n        };\n    }\n    return eventListener;\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-event-listener.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AudioBufferSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = false;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-param.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioParamConnections(context, audioParam) {\n    const audioGraph = getAudioGraph(context);\n    return getValueForKey(audioGraph.params, audioParam);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-connections.js.map","import { getAudioNodeRenderer } from './get-audio-node-renderer';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nexport const renderInputsOfAudioParam = (context, audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    return Promise\n        .all(Array\n        .from(audioParamConnections.activeInputs)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioParam, output));\n    }));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-param.js.map","import { getNativeAudioParam } from './get-native-audio-param';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const connectAudioParam = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam = getNativeAudioParam(audioParam)) => {\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-audio-param.js.map","import { getAudioParamRenderer } from './get-audio-param-renderer';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const renderAutomation = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n    const audioParamRenderer = getAudioParamRenderer(context, audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/render-automation.js.map","import { getAudioParamConnections } from './get-audio-param-connections';\nexport function getAudioParamRenderer(context, audioParam) {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    if (audioParamConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n    return audioParamConnections.renderer;\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-renderer.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'));\n};\n//# sourceMappingURL=/build/es2018/helpers/is-valid-latency-hint.js.map","import { wrapEventListener } from './helpers/wrap-event-listener';\nexport class EventTarget {\n    constructor(_nativeEventTarget) {\n        this._nativeEventTarget = _nativeEventTarget;\n        this._listeners = new WeakMap();\n    }\n    addEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        let wrappedEventListener = this._listeners.get(listener);\n        if (wrappedEventListener === undefined) {\n            wrappedEventListener = wrapEventListener(this, listener);\n            if (typeof listener === 'function') {\n                this._listeners.set(listener, wrappedEventListener);\n            }\n        }\n        return this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n    }\n    dispatchEvent(event) {\n        return this._nativeEventTarget.dispatchEvent(event);\n    }\n    removeEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        const wrappedEventListener = this._listeners.get(listener);\n        return this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);\n    }\n}\n//# sourceMappingURL=/build/es2018/event-target.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node-output-connection.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-worklet-node.js.map","export const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (inputs !== undefined) {\n        nativeSourceAudioNode.connect(inputs[input], output, 0);\n        return [inputs[input], output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/delete-event-listeners-of-audio-node.js.map","export const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (input === undefined || output === undefined) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode);\n    }\n    else if (inputs !== undefined) {\n        nativeSourceAudioNode.disconnect(inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/insert-element-in-set.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => {\n    return ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-active-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-passive-audio-node.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array\n        .from(set)\n        .filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=/build/es2018/helpers/pick-element-from-set.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalState } from './set-internal-state';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => (connections.size === 0))) {\n        setInternalState(audioNode, 'passive');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source.connect(analyzer);\n        analyzer.connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-node-disconnect-method-support.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/native-audio-node.js.map","import { EventTarget } from '../event-target';\nimport { ACTIVE_AUDIO_NODE_STORE, AUDIO_NODE_STORE, AUXILIARY_GAIN_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addAudioNode = (context, audioNode, audioNoderRender, nativeAudioNode) => {\n    const activeInputs = [];\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n        activeInputs.push(new Set());\n    }\n    const { nodes } = getAudioGraph(context);\n    nodes.set(audioNode, {\n        activeInputs,\n        outputs: new Set(),\n        passiveInputs: new WeakMap(),\n        renderer: audioNoderRender\n    });\n};\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isPassiveAudioNode(destination)) {\n                setInternalState(destination, 'active');\n            }\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { activeInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    }\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            nativeAudioNode.connect(nativeAudioParam, output);\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { activeInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    }\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .reduce((numberOfDeletedConnections, outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return numberOfDeletedConnections + 1;\n    }, 0);\n};\nexport const createAudioNodeConstructor = (cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, detectCycles, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends EventTarget {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            if (internalState === 'active') {\n                ACTIVE_AUDIO_NODE_STORE.add(this);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            addAudioNode(context, this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalState(destination, 'active');\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            AUXILIARY_GAIN_NODE_STORE.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                detectCycles(this, destination);\n                if (isOffline) {\n                    addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input);\n                }\n                else {\n                    addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            detectCycles(this, destination);\n            if (isOffline) {\n                addConnectionToAudioParamOfOfflineAudioContext(this, destination, output);\n            }\n            else {\n                addConnectionToAudioParamOfAudioContext(this, destination, output);\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            if (destinationOrOutput === undefined) {\n                deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                if (deleteConnectionToDestination(this, destinationOrOutput, output, input) === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=/build/es2018/read-only-map.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    outputChannelCount: undefined,\n    parameterData: {},\n    processorOptions: {}\n};\nconst createChannelCount = (length) => {\n    const channelCount = [];\n    for (let i = 0; i < length; i += 1) {\n        channelCount.push(1);\n    }\n    return channelCount;\n};\nconst sanitizedOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: (options.outputChannelCount !== undefined) ?\n            options.outputChannelCount :\n            (options.numberOfInputs === 1 && options.numberOfOutputs === 1) ?\n                /*\n                 * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                 * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                 * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                 */\n                [options.channelCount] :\n                createChannelCount(options.numberOfOutputs)\n    };\n};\nexport const createAudioWorkletNodeConstructor = (createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) => {\n    return class AudioWorkletNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, name, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = (nodeNameToProcessorConstructorMap === undefined) ?\n                undefined :\n                nodeNameToProcessorConstructorMap.get(name);\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline)\n                ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor)\n                : null);\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, 'active', nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            // Bug #86 & #87: Every browser but Firefox needs to get an unused output which should not be exposed.\n            this._numberOfOutputs = (options.numberOfOutputs === 0) ? 0 : this._nativeAudioWorkletNode.numberOfOutputs;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Every browser but Firefox needs an output to be connected.\n             *\n             * Bug #50: Only Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore this is currently faked by\n             * using another AudioContext. And that is the reason why this will fail in case of a closed AudioContext.\n             */\n            if (context.state !== 'closed') {\n                const gainNode = new gainNodeConstructor(context, { gain: 0 });\n                try {\n                    this\n                        .connect(gainNode)\n                        .connect(context.destination);\n                }\n                catch (err) {\n                    if (err.name !== 'IndexSizeError') {\n                        throw err; // tslint:disable-line:rxjs-throw-error\n                    }\n                }\n            }\n        }\n        get numberOfOutputs() {\n            return this._numberOfOutputs;\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = (nativeOnProcessorError === wrappedListener) ? value : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-constructor.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=/build/es2018/helpers/copy-from-channel.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer\n                .getChannelData(channelNumber)\n                .set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/copy-to-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = (typeof y === 'number') ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-nested-arrays.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor) => {\n    const { length } = renderedBuffer;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = (numberOfOutputChannels === 0) ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, renderedBuffer.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = Array\n        .from(proxy.parameters.keys())\n        .reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n                copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs\n                .map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [new Float32Array(0)];\n                }\n                return input;\n            });\n            const activeSourceFlag = audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', { error }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: options.outputChannelCount[i]\n                    }));\n                }\n                // Bug #87: Expose at least one output to make this node connectable.\n                const outputAudioNodes = (options.numberOfOutputs === 0) ?\n                    [outputChannelSplitterNode] :\n                    outputChannelMergerNodes;\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputAudioNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputAudioNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeOutputNodes === null) ? nativeAudioWorkletNode : nativeOutputNodes);\n            if (nativeOutputNodes !== null) {\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processorConstructor === undefined) {\n                    throw new Error('Missing the processor constructor.');\n                }\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n                    ? 0\n                    : processorConstructor.parameterDescriptors.length;\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfInputChannels + numberOfParameters, \n                // Ceil the length to the next full render quantum.\n                // Bug #17: Safari does not yet expose the length.\n                Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                const gainNodes = [];\n                const inputChannelSplitterNodes = [];\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: options.channelCountMode,\n                        channelInterpretation: options.channelInterpretation,\n                        gain: 1\n                    }));\n                    inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        numberOfOutputs: options.channelCount\n                    }));\n                }\n                const constantSourceNodes = await Promise\n                    .all(Array\n                    .from(proxy.parameters.values())\n                    .map(async (audioParam) => {\n                    const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        offset: audioParam.value\n                    });\n                    await renderAutomation(proxy.context, partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                    return constantSourceNode;\n                }));\n                const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                });\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                    for (let j = 0; j < options.channelCount; j += 1) {\n                        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n                    }\n                }\n                for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                    constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                    constantSourceNode.start(0);\n                }\n                inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                return Promise\n                    .all(gainNodes\n                    .map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)))\n                    .then(() => renderNativeOfflineAudioContext(partialOfflineAudioContext))\n                    .then(async (renderedBuffer) => {\n                    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                    const processedBuffer = await processBuffer(proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor);\n                    if (processedBuffer !== null) {\n                        audioBufferSourceNode.buffer = processedBuffer;\n                        audioBufferSourceNode.start(0);\n                    }\n                    audioBufferSourceNode.connect(outputChannelSplitterNode);\n                    for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                        const outputChannelMergerNode = outputChannelMergerNodes[i];\n                        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                        }\n                        outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                    }\n                    return outputGainNode;\n                });\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioWorkletNodeOrOutputNodes = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrOutputNodes !== undefined) {\n                    const renderedNativeAudioWorkletNodeOrGainNode = Array.isArray(renderedNativeAudioWorkletNodeOrOutputNodes)\n                        ? renderedNativeAudioWorkletNodeOrOutputNodes[2]\n                        : renderedNativeAudioWorkletNodeOrOutputNodes;\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-renderer-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-worklet-processor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class BiquadFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, 'passive', nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #77: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #79: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelMergerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelMergerNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelSplitterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConstantSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, 'passive', nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConvolverNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, 'passive', nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DelayNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, 'passive', nativeDelayNode, delayNodeRenderer);\n            // @todo Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput)\n                .disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes\n                    .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                    .disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                .disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n            .disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/disconnect-multiple-outputs.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DynamicsCompressorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, 'passive', nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class GainNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, 'passive', nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-constructor.js.map","export const createInvalidAccessError = () => {\n    try {\n        return new DOMException('', 'InvalidAccessError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 15;\n        err.name = 'InvalidAccessError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-access-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class IIRFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, 'passive', nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=/build/es2018/helpers/filter-buffer.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([\n        1179011410,\n        40,\n        1163280727,\n        544501094,\n        16,\n        131073,\n        44100,\n        176400,\n        1048580,\n        1635017060,\n        4,\n        0\n    ]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch (_a) {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-promise-support.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-offline-audio-context-constructor.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-option.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-options.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-audio-param-value.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=/build/es2018/helpers/compute-buffer-size.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor-promise.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/clone-audio-worklet-node-options.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const interceptConnections = (original, interceptor) => {\n    original.connect = ((destination, \n    // @todo TypeScript can't infer the type for the parameters output and input in this case.\n    output = 0, // tslint:disable-line:no-inferrable-types\n    input = 0 // tslint:disable-line:no-inferrable-types\n    ) => {\n        if (isNativeAudioNode(destination)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            interceptor.connect.call(interceptor, destination, output, input);\n            // Bug #11: Safari does not support chaining yet.\n            return destination;\n        }\n        // @todo TypeScript does still assume that connect() returns void.\n        return interceptor.connect.call(interceptor, destination, output);\n    });\n    original.disconnect = function () {\n        // @todo TypeScript cannot infer all the signatures yet.\n        interceptor.disconnect.apply(interceptor, arguments);\n    };\n    return original;\n};\n//# sourceMappingURL=/build/es2018/helpers/intercept-connections.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            // @todo Add a test which checks support for TypedArray.prototype.fill().\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-faker-factory.js.map","export const createNotSupportedError = () => {\n    try {\n        return new DOMException('', 'NotSupportedError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/not-supported-error.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/offline-audio-context-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class OscillatorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, 'passive', nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class PannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, 'passive', nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, periodicWaveStore) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n            periodicWaveStore.add(periodicWave);\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype)\n                || (periodicWaveStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/periodic-wave-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class StereoPannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = ((isOffline) ? createStereoPannerNodeRenderer() : null);\n            super(context, 'passive', nativeStereoPannerNode, stereoPannerNodeRenderer);\n            // Bug #106: Edge does not export a maxValue and minValue property.\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-constructor.js.map","export const createUnknownError = () => {\n    try {\n        return new DOMException('', 'UnknownError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.name = 'UnknownError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/unknown-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class WaveShaperNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            super(context, 'passive', nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map","// Safari at version 11 did not support transferables.\nexport const testTransferablesSupport = () => new Promise((resolve) => {\n    const arrayBuffer = new ArrayBuffer(0);\n    const { port1, port2 } = new MessageChannel();\n    port1.onmessage = ({ data }) => resolve(data !== null);\n    port2.postMessage(arrayBuffer, [arrayBuffer]);\n});\n//# sourceMappingURL=/build/es2018/helpers/test-transferables-support.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNode } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNoneAudioDestinationNodeConstructor } from './factories/none-audio-destination-node-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelSplitterNodeChannelCountSupport } from './factories/test-channel-splitter-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferCopyChannelMethodsSubarray } from './factories/wrap-audio-buffer-copy-channel-methods-subarray';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_BUFFER_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, PERIODIC_WAVE_STORE } from './globals';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from './helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nconst cacheTestResult = createCacheTestResult(new Map());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDetectCycles(AUDIO_PARAM_AUDIO_NODE_STORE, createNotSupportedError, getAudioNodeConnections, getValueForKey), isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst noneAudioDestinationNodeConstructor = createNoneAudioDestinationNodeConstructor(audioNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { analyserNodeConstructor as AnalyserNode };\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst wrapAudioBufferCopyChannelMethodsSubarray = createWrapAudioBufferCopyChannelMethodsSubarray(convertNumberToUnsignedLong, createIndexSizeError);\nconst audioBufferConstructor = createAudioBufferConstructor(AUDIO_BUFFER_STORE, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(createNativeAudioBufferSourceNode);\nconst createAudioParam = createAudioParamFactory(createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(createNativeBiquadFilterNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(createNativeConstantSourceNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(createNativeDelayNode);\nconst delayNodeConstructor = createDelayNodeConstructor(createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(createNativeDynamicsCompressorNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createGainNodeRenderer = createGainNodeRendererFactory(createNativeGainNode);\nconst gainNodeConstructor = createGainNodeConstructor(createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(createNativeOscillatorNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeGainNode);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(createNativePannerNode);\nconst pannerNodeConstructor = createPannerNodeConstructor(createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, PERIODIC_WAVE_STORE);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(createNativeStereoPannerNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, new WeakMap(), new WeakMap()) :\n    undefined;\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(AUDIO_BUFFER_STORE, cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(AUDIO_BUFFER_STORE, cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelSplitterNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2018/module.js.map","import { TEST_RESULTS } from '../globals';\nexport const createCacheTestResult = (ongoingTests) => {\n    return (tester, test) => {\n        const cachedTestResult = TEST_RESULTS.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        const synchronousTestResult = test();\n        if (synchronousTestResult instanceof Promise) {\n            ongoingTests.set(tester, synchronousTestResult);\n            return synchronousTestResult\n                .then((finalTestResult) => {\n                ongoingTests.delete(tester);\n                TEST_RESULTS.set(tester, finalTestResult);\n                return finalTestResult;\n            });\n        }\n        TEST_RESULTS.set(tester, synchronousTestResult);\n        return synchronousTestResult;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/cache-test-result.js.map","export const createWindow = () => (typeof window === 'undefined') ? null : window;\n//# sourceMappingURL=/build/es2018/factories/window.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return (window.hasOwnProperty('webkitOfflineAudioContext')) ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-offline-audio-context-constructor.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-offline-audio-context.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return (window.hasOwnProperty('webkitAudioContext')) ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-context-constructor.js.map","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed'\n            && nativeAudioContextConstructor !== null\n            && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-backup-native-context.js.map","export const createNativeAudioNodeFactory = (getBackupNativeContext) => {\n    return (nativeContext, factoryFunction) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        if (backupNativeContext !== null) {\n            return factoryFunction(backupNativeContext);\n        }\n        return factoryFunction(nativeContext);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-node-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-analyser-node-factory.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map","export const createIsNativeAudioNode = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-node.js.map","export const createIsNativeAudioParam = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-param.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-node-disconnect-method.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, createNotSupportedError, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(source, destination) {\n        const audioNodeOfDestination = (isAudioNode(destination))\n            ? destination\n            : getValueForKey(audioParamAudioNodeStore, destination);\n        if (isDelayNode(audioNodeOfDestination)) {\n            return true;\n        }\n        if (source === audioNodeOfDestination) {\n            throw createNotSupportedError();\n        }\n        const { outputs } = getAudioNodeConnections(audioNodeOfDestination);\n        for (const outputConnection of outputs) {\n            if (detectCycles(source, outputConnection[0])) {\n                return true;\n            }\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/delay-node.js.map","export const createNoneAudioDestinationNodeConstructor = (audioNodeConstructor) => {\n    return class NoneAudioDestinationNode extends audioNodeConstructor {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(context, internalState, nativeAudioNode, audioNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/none-audio-destination-node-constructor.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-constructor.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convert-number-to-unsigned-long.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","export const createWrapAudioBufferCopyChannelMethodsSubarray = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < destination.length) {\n                    return copyFromChannel.call(audioBuffer, destination.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < source.length) {\n                    return copyToChannel.call(audioBuffer, source.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js.map","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-constructor-support.js.map","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.start(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.start();\n        nativeAudioBufferSourceNode.stop();\n        try {\n            nativeAudioBufferSourceNode.stop();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.stop(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (createNativeAudioNode) => {\n    return (nativeAudioScheduledSourceNode, nativeContext) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        nativeAudioScheduledSourceNode.connect(nativeGainNode);\n        const disconnectGainNode = ((disconnect) => {\n            return () => {\n                // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n                nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n            };\n        })(nativeAudioScheduledSourceNode.disconnect);\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n        interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.stop = ((stop) => {\n            let isStopped = false;\n            return (when = 0) => {\n                if (isStopped) {\n                    try {\n                        stop.call(nativeAudioScheduledSourceNode, when);\n                    }\n                    catch (_a) {\n                        nativeGainNode.gain.setValueAtTime(0, when);\n                    }\n                }\n                else {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                    isStopped = true;\n                }\n            };\n        })(nativeAudioScheduledSourceNode.stop);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options = {}) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Edge does not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-source-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n    let endTime = Number.POSITIVE_INFINITY;\n    let stopTime = Number.POSITIVE_INFINITY;\n    nativeAudioScheduledSourceNode.start = ((start, stop) => {\n        return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n            start.call(nativeAudioScheduledSourceNode, when, offset);\n            if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n                const actualStartTime = Math.max(when, nativeContext.currentTime);\n                // @todo The playbackRate could of course also have been automated and is not always fixed.\n                const durationInBufferTime = (duration / nativeAudioScheduledSourceNode.playbackRate.value);\n                endTime = actualStartTime + durationInBufferTime;\n                stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n            }\n        };\n    })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            stopTime = Math.max(when, nativeContext.currentTime);\n            stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js.map","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.start();\n        }\n        catch (_a) {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n        audioBuffer.getChannelData(0)[0] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.start(0, 0, 0);\n        audioBufferSourceNode.connect(offlineAudioContext.destination);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            offlineAudioContext.oncomplete = ({ renderedBuffer }) => {\n                // Bug #5: Safari does not support copyFromChannel().\n                resolve(renderedBuffer.getChannelData(0)[0] === 0);\n            };\n            offlineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js.map","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        try {\n            nativeAudioBufferSourceNode.start(0, 1);\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioBufferSourceNodeRendererFactory = (createNativeAudioBufferSourceNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.playbackRate);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map","import { AutomationEventList } from 'automation-events';\nimport { AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE } from '../globals';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nconst addAudioParam = (context, audioParam, audioParamRenderer) => {\n    const audioGraph = getAudioGraph(context);\n    audioGraph.params.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n};\nexport const createAudioParamFactory = (createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue() {\n                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return (minValue === null) ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor((endTime) * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((values.length - 1) / duration) * (((firstSample + i) / sampleRate) - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] = (lowerIndex === upperIndex)\n                            ? values[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * values[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * values[upperIndex]);\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    audioParam.setValueAtTime(values[values.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        AUDIO_PARAM_STORE.set(audioParam, nativeAudioParam);\n        AUDIO_PARAM_AUDIO_NODE_STORE.set(audioParam, audioNode);\n        addAudioParam(audioNode.context, audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-factory.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-renderer.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nexport const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline) ? createAudioDestinationNodeRenderer() : null);\n            const audioGraph = { audioWorkletGlobalScope: null, nodes: new WeakMap(), params: new WeakMap() };\n            AUDIO_GRAPHS.set(context, audioGraph);\n            super(context, 'passive', nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map","import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioDestinationNodeRenderer = () => {\n    let nativeAudioDestinationNodePromise = null;\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext) {\n            if (nativeAudioDestinationNodePromise === null) {\n                nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n            }\n            return nativeAudioDestinationNodePromise;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-renderer-factory.js.map","export const createNativeAudioDestinationNode = (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Edge & Safari do not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n        nativeAudioDestinationNode.channelCount = channelCount;\n    }\n    // Bug #83: Edge & Safari do not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n        nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n        Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.channelCount\n        });\n    }\n    return nativeAudioDestinationNode;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-destination-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBiquadFilter());\n        assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n        assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n        return nativeBiquadFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-biquad-filter-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createBiquadFilterNodeRendererFactory = (createNativeBiquadFilterNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.Q);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeContext, channelMergerNode) => {\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const length = channelMergerNode.numberOfInputs;\n        for (let i = 0; i < length; i += 1) {\n            audioBufferSourceNode.connect(channelMergerNode, 0, i);\n        }\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-channel-merger-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelMerger(options.numberOfInputs);\n        });\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        // Bug #15: Safari does not return the default properties.\n        if (nativeChannelMergerNode.channelCount !== 1 &&\n            nativeChannelMergerNode.channelCountMode !== 'explicit') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        // Bug #16: Firefox does not throw an error when setting a different channelCount or channelCountMode.\n        try {\n            nativeChannelMergerNode.channelCount = (options.numberOfInputs === undefined) ? 6 : options.numberOfInputs;\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-merger-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n        });\n        // Bug #96: Safari does not have the correct channelCount.\n        // Bug #29: Edge & Safari do not have the correct channelCountMode.\n        // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n        assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n        // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n        wrapChannelSplitterNode(nativeChannelSplitterNode);\n        return nativeChannelSplitterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-splitter-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n     * explicit.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n     * discrete.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-channel-splitter-node.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        assignNativeAudioNodeOptions(nativeGainNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n        return nativeGainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-gain-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        /*\n         * @todo Edge will throw a NotSupportedError when calling createBuffer() on a closed context. That's why the audioBuffer is created\n         * after the audioBufferSourceNode in this case. If the context is closed createNativeAudioBufferSourceNode() will throw the\n         * expected error and createBuffer() never gets called.\n         */\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        audioBufferSourceNode.connect(gainNode);\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return undefined;\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        return interceptConnections(nativeConstantSourceNodeFaker, gainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createConstantSource();\n        });\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConstantSourceNodeRendererFactory = (createNativeConstantSourceNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Edge & Safari allow to change the channelCount\n        if (options.channelCount !== 2) {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCount', {\n            get: () => options.channelCount,\n            set: (value) => {\n                if (value !== options.channelCount) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        // Bug #114: Edge & Safari allow to change the channelCountMode\n        if (options.channelCountMode !== 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCountMode', {\n            get: () => options.channelCountMode,\n            set: (value) => {\n                if (value !== options.channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeDelayNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDelay(options.maxDelayTime));\n        assignNativeAudioNodeOptions(nativeDelayNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n        return nativeDelayNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-delay-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDelayNodeRendererFactory = (createNativeDelayNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDynamicsCompressor());\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-dynamics-compressor-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDynamicsCompressorNodeRendererFactory = (createNativeDynamicsCompressorNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.attack);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.knee);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.ratio);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.release);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createGainNodeRendererFactory = (createNativeGainNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map","export const createNativeScriptProcessorNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n        return createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-script-processor-node-factory.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-native-offline-audio-context.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-offline-audio-context-current-time-support.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        // @todo Add a test which checks support for TypedArray.prototype.fill().\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, \n                // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                nativeAudioBufferSourceNode.buffer = filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        const nativeIIRFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n        });\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-factory.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-listener-factory.js.map","import { EventTarget } from '../event-target';\nimport { CONTEXT_STORE } from '../globals';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener) => {\n    return class MinimalBaseAudioContext extends EventTarget {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n            const sampleRate = _nativeContext.sampleRate;\n            Object.defineProperty(_nativeContext, 'sampleRate', {\n                get: () => sampleRate\n            });\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = (nativeOnStateChange === wrappedListener) ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-base-audio-context-constructor.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: No browser does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-oscillator-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createOscillatorNodeRendererFactory = (createNativeOscillatorNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeGainNode) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        const positiveWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        inputGainNode.connect(negativeWaveShaperNode);\n        negativeWaveShaperNode.connect(outputGainNode);\n        inputGainNode.connect(invertGainNode);\n        invertGainNode.connect(positiveWaveShaperNode);\n        positiveWaveShaperNode.connect(revertGainNode);\n        revertGainNode.connect(outputGainNode);\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (curve !== null && curve.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = ((curveLength + 1) / 2) - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] = (lowerIndex === upperIndex)\n                            ? value[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * value[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * value[upperIndex]);\n                        positiveCurve[i] = (lowerIndex === upperIndex)\n                            ? -value[curveLength - 1 - lowerIndex]\n                            : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex])\n                                - ((1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex]);\n                    }\n                    negativeCurve[length] = (curveLength % 2 === 1) ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== nativeWaveShaperNodeFaker.curve) {\n            nativeWaveShaperNodeFaker.curve = curve;\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        return interceptConnections(nativeWaveShaperNodeFaker, outputGainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        return nativeWaveShaperNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [1, 0, 0];\n        let lastPosition = [0, 0, 0];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(6)[0],\n                inputBuffer.getChannelData(7)[0],\n                inputBuffer.getChannelData(8)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        inputGainNode.connect(pannerNode);\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n        waveShaperNode.connect(orientationXGainNode);\n        waveShaperNode.connect(orientationYGainNode);\n        waveShaperNode.connect(orientationZGainNode);\n        waveShaperNode.connect(positionXGainNode);\n        waveShaperNode.connect(positionYGainNode);\n        waveShaperNode.connect(positionZGainNode);\n        orientationXGainNode.connect(channelMergerNode);\n        orientationYGainNode.connect(channelMergerNode);\n        orientationZGainNode.connect(channelMergerNode);\n        positionXGainNode.connect(channelMergerNode);\n        positionYGainNode.connect(channelMergerNode);\n        positionZGainNode.connect(channelMergerNode);\n        channelMergerNode.connect(scriptProcessorNode);\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        return interceptConnections(nativePannerNodeFaker, pannerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createPannerNodeRendererFactory = (createNativePannerNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationZ);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionZ);\n            }\n            if (nativePannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map","export const createNativePeriodicWaveFactory = (getBackupNativeContext) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n        const wrappedImag = new Float32Array(imag);\n        const wrappedReal = new Float32Array(real);\n        if (backupNativeContext !== null) {\n            return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n        }\n        return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-periodic-wave-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n        return [leftGainNode, rightGainNode];\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        return [\n            leftInputForLeftOutputGainNode,\n            rightInputForLeftOutputGainNode,\n            leftInputForRightOutputGainNode,\n            rightInputForRightOutputGainNode\n        ];\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let outputNodes = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    inputGainNode.disconnect();\n                    outputNodes.forEach((outputNode) => outputNode.disconnect());\n                    outputNodes = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => createNativeAudioNode(nativeContext, (ntvCntxt) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createStereoPannerNodeRendererFactory = (createNativeStereoPannerNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.pan);\n            }\n            if (nativeStereoPannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (nativeWaveShaperNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map","export const createIsSecureContext = (window) => (window !== null && window.isSecureContext);\n//# sourceMappingURL=/build/es2018/factories/is-secure-context.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (nativeContext, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(nativeContext.currentTime * nativeContext.sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return nativeContext.currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/expose-current-frame-and-current-time.js.map","export const evaluateSource = (source) => {\n    return new Promise((resolve, reject) => {\n        const head = document.head;\n        if (head === null) {\n            reject(new SyntaxError());\n        }\n        else {\n            const script = document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/evaluate-source.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return response.text();\n            }\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/fetch-source.js.map","export const createIsNativeAudioContext = (nativeAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-context.js.map","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        return (isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-context.js.map","import { DETACHED_ARRAY_BUFFERS } from '../globals';\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (DETACHED_ARRAY_BUFFERS.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            DETACHED_ARRAY_BUFFERS.add(audioData);\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = (nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)) ?\n                new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) :\n                nativeContext;\n            const promise = nativeContextOrBackupNativeContext\n                .decodeAudioData(audioData)\n                .catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise\n                .then((audioBuffer) => {\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                    // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n                }\n                else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decode-audio-data.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1 } = new MessageChannel();\n    port1.postMessage(arrayBuffer, [arrayBuffer]);\n};\n//# sourceMappingURL=/build/es2018/helpers/detach-array-buffer.js.map","export const createDataCloneError = () => {\n    try {\n        return new DOMException('', 'DataCloneError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 25;\n        err.name = 'DataCloneError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/data-clone-error.js.map","export const createEncodingError = () => {\n    try {\n        return new DOMException('', 'EncodingError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 0;\n        err.name = 'EncodingError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/encoding-error.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaElementAudioSourceNodeConstructor = (createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaElementAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaElementAudioSourceNode, null);\n            // Bug #63: Edge & Firefox do not expose the mediaElement yet.\n            this._mediaElement = options.mediaElement;\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return (this._nativeMediaElementAudioSourceNode.mediaElement === undefined) ?\n                this._mediaElement :\n                this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-element-audio-source-node-constructor.js.map","export const createNativeMediaElementAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n        return ntvDCntxt.createMediaElementSource(options.mediaElement);\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-element-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamAudioSourceNodeConstructor = (createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-audio-source-node-constructor.js.map","export const createNativeMediaStreamAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStream }) => {\n        const audioStreamTracks = mediaStream.getAudioTracks();\n        const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            /*\n             * Bug #151: Firefox does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n             * Bug #159: Chrome and Firefox pick the first audio track if the MediaStream has more than one audio track.\n             */\n            const filteredAudioStreamTracks = audioStreamTracks\n                .sort((a, b) => ((a.id < b.id) ? -1 : (a.id > b.id) ? 1 : 0))\n                .slice(0, 1);\n            return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n        });\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (audioStreamTracks.length === 0) {\n            throw createInvalidStateError();\n        }\n        // Bug #63: Edge & Firefox do not expose the mediaStream yet.\n        Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamTrackAudioSourceNodeConstructor = (createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamTrackAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-track-audio-source-node-constructor.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n        }\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            const mediaStream = new MediaStream([mediaStreamTrack]);\n            const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream);\n            // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n            if (mediaStreamTrack.kind !== 'audio') {\n                throw createInvalidStateError();\n            }\n            return nativeMediaStreamAudioSourceNode;\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-context-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connect-multiple-outputs.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { AUXILIARY_GAIN_NODE_STORE } from '../globals';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        if (options.outputChannelCount !== undefined) {\n            if (options.outputChannelCount.length !== options.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n            if (options.outputChannelCount.some((channelCount) => (channelCount < 1))) {\n                throw createNotSupportedError();\n            }\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n            ? 0\n            : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: (options.parameterData[name] !== undefined)\n                        ? options.parameterData[name]\n                        : (defaultValue === undefined)\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined) ? 0 : defaultValue\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined) ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined) ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: options.outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap((processorConstructor.parameterDescriptors === undefined)\n            ? []\n            : processorConstructor.parameterDescriptors\n                .map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        if (options.numberOfOutputs > 0) {\n            scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n            const outputChannelMergerNode = outputChannelMergerNodes[i];\n            for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n            }\n            outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = (options.numberOfOutputs === 0) ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = (typeof value === 'function') ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = (typeof args[1] === 'function')\n                        ? args[1]\n                        : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = (typeof value === 'function') ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise\n            .then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n        const parameters = (processorConstructor.parameterDescriptors === undefined) ?\n            [] :\n            processorConstructor.parameterDescriptors\n                .reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs\n                            .map((input, index) => {\n                            const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeAudioWorkletNodeFaker);\n                            if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                                return [new Float32Array(0)];\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', { error }));\n                    }\n                    if (!isActive) {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        break;\n                    }\n                }\n            }\n        };\n        return nativeAudioWorkletNodeFaker;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-faker-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                // Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return (isNativeOfflineAudioContext(ntvCntxt) && options.numberOfInputs !== 0 && options.numberOfOutputs === 0) ?\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, {\n                            ...options,\n                            numberOfOutputs: 1,\n                            outputChannelCount: [1],\n                            parameterData: { ...options.parameterData, hasNoOutput: 1 }\n                        }) :\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome does not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome Canary throws an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-factory.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return (window.hasOwnProperty('AudioWorkletNode')) ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-constructor.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-audio-context-constructor.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n            // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n            if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/create-native-offline-audio-context.js.map","import { getAudioNodeRenderer } from '../helpers/get-audio-node-renderer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext)\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/start-rendering.js.map","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-context.js.map","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-node.js.map","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-param.js.map","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-offline-audio-context.js.map","export const createIsSupportedPromise = (cacheTestResult, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelSplitterNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n    if (cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport)\n        && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport)\n        && cacheTestResult(testChannelSplitterNodeChannelCountSupport, testChannelSplitterNodeChannelCountSupport)\n        && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport)\n        && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport)\n        && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport)) {\n        return Promise\n            .all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ])\n            .then((results) => results.every((result) => result));\n    }\n    return Promise.resolve(false);\n};\n//# sourceMappingURL=/build/es2018/factories/is-supported-promise.js.map","export const createTestAudioContextCloseMethodSupport = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n        // Try to check the prototype before constructing the AudioContext.\n        if (nativeAudioContextConstructor.prototype !== undefined &&\n            nativeAudioContextConstructor.prototype.close !== undefined) {\n            return true;\n        }\n        const audioContext = new nativeAudioContextConstructor();\n        const isAudioContextClosable = (audioContext.close !== undefined);\n        try {\n            audioContext.close();\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        return isAudioContextClosable;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-context-close-method-support.js.map","/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            let isPending = true;\n            const resolvePromise = (err) => {\n                if (isPending) {\n                    isPending = false;\n                    offlineAudioContext.startRendering();\n                    resolve(err instanceof TypeError);\n                }\n            };\n            offlineAudioContext\n                // Bug #1: Safari requires a successCallback.\n                .decodeAudioData(null, () => {\n                // Ignore the success callback.\n            }, resolvePromise)\n                // Bug #6 Chrome does not call the errorCallback\n                .catch(resolvePromise);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-context-decode-audio-data-method-type-error-support.js.map","export const createTestAudioContextOptionsSupport = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n        let audioContext;\n        try {\n            audioContext = new nativeAudioContextConstructor({ latencyHint: 'balanced' });\n        }\n        catch (_a) {\n            return false;\n        }\n        audioContext.close();\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-context-options-support.js.map","/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor(\"a\",A)'], { type: 'application/javascript; charset=utf-8' });\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const gainNode = offlineAudioContext.createGain();\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n            gainNode.connect(audioWorkletNode);\n            await offlineAudioContext.startRendering();\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-worklet-processor-no-outputs-support.js.map","/**\n * Firefox up to version 61 had a bug which caused the ChannelSplitterNode to expose a wrong channelCount property.\n */\nexport const createTestChannelSplitterNodeChannelCountSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const channelSplitterNode = offlineAudioContext.createChannelSplitter(4);\n        return (channelSplitterNode.channelCount === 4);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-channel-splitter-node-channel-count-support.js.map","export const createTestConstantSourceNodeAccurateSchedulingSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeConstantSourceNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => ntvCntxt.createConstantSource());\n        /*\n         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n         * the implementation of Firefox right now, but it could probably be done in a better way.\n         */\n        return (nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-constant-source-node-accurate-scheduling-support.js.map","// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\nexport const createTestConvolverNodeBufferReassignabilitySupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n        const nativeConvolverNode = offlineAudioContext.createConvolver();\n        nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        try {\n            nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-convolver-node-buffer-reassignability-support.js.map","export const createTestIsSecureContextSupport = (window) => {\n    return () => (window !== null && window.hasOwnProperty('isSecureContext'));\n};\n//# sourceMappingURL=/build/es2018/factories/test-is-secure-context-support.js.map","/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        /*\n         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n         * support the tested behaviour.\n         */\n        if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n            return Promise.resolve(true);\n        }\n        const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n        const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n        constantSourceNode.channelCount = 1;\n        constantSourceNode.offset.value = 1;\n        stereoPanner.channelCount = 1;\n        constantSourceNode.start();\n        constantSourceNode\n            .connect(stereoPanner)\n            .connect(nativeOfflineAudioContext.destination);\n        return nativeOfflineAudioContext\n            .startRendering()\n            .then((buffer) => buffer.getChannelData(0)[0] !== 1);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-stereo-panner-node-default-value-support.js.map"],"sourceRoot":""}